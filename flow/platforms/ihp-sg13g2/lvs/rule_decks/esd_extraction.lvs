# frozen_string_literal: true

#==========================================================================
# Copyright 2024 IHP PDK Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# SPDX-License-Identifier: Apache-2.0
#==========================================================================

#================================
# ----- MOS-SAB EXTRACTION ------
#================================

logger.info('Starting ESD EXTRACTION')

#======================
# ----- diode-ESD -----
#======================

# diodevdd_2kv
logger.info('Extracting diodevdd_2kv ESD device')
extract_devices(bjt3('diodevdd_2kv', Esd3Term), { 'C' => diodevdd_2kv_c.extents,
                                                  'B' => diodevdd_2kv_b.extents,
                                                  'E' => diodevdd_2kv_e_1x1,
                                                  'tC' => diodevdd_2kv_c,
                                                  'tB' => diodevdd_2kv_b,
                                                  'tE' => diodevdd_2kv_e_1x1 })

# diodevdd_4kv
logger.info('Extracting diodevdd_4kv ESD device')
extract_devices(bjt3('diodevdd_4kv', Esd3Term), { 'C' => diodevdd_4kv_c.extents,
                                                  'B' => diodevdd_4kv_b.extents,
                                                  'E' => diodevdd_4kv_e_1x1,
                                                  'tC' => diodevdd_4kv_c,
                                                  'tB' => diodevdd_4kv_b,
                                                  'tE' => diodevdd_4kv_e_1x1 })

# diodevss_2kv
logger.info('Extracting diodevss_2kv ESD device')
extract_devices(bjt3('diodevss_2kv', Esd3Term), { 'C' => diodevss_2kv_c.extents,
                                                  'B' => diodevss_2kv_b.extents,
                                                  'E' => diodevss_2kv_e_1x1,
                                                  'tC' => diodevss_2kv_c,
                                                  'tB' => diodevss_2kv_b,
                                                  'tE' => diodevss_2kv_e_1x1 })

# diodevss_4kv
logger.info('Extracting diodevss_4kv ESD device')
extract_devices(bjt3('diodevss_4kv', Esd3Term), { 'C' => diodevss_4kv_c.extents,
                                                  'B' => diodevss_4kv_b.extents,
                                                  'E' => diodevss_4kv_e_1x1,
                                                  'tC' => diodevss_4kv_c,
                                                  'tB' => diodevss_4kv_b,
                                                  'tE' => diodevss_4kv_e_1x1 })

#=======================
# ----- idiode-ESD -----
#=======================

# idiodevdd_2kv
logger.info('Extracting idiodevdd_2kv ESD device')
extract_devices(bjt3('idiodevdd_2kv', Esd3Term), { 'C' => idiodevdd_2kv_c.extents,
                                                   'B' => idiodevdd_2kv_b.extents,
                                                   'E' => idiodevdd_2kv_e_1x1,
                                                   'tC' => idiodevdd_2kv_c,
                                                   'tB' => idiodevdd_2kv_b,
                                                   'tE' => idiodevdd_2kv_e_1x1 })

# idiodevdd_4kv
logger.info('Extracting idiodevdd_4kv ESD device')
extract_devices(bjt3('idiodevdd_4kv', Esd3Term), { 'C' => idiodevdd_4kv_c.extents,
                                                   'B' => idiodevdd_4kv_b.extents,
                                                   'E' => idiodevdd_4kv_e_1x1,
                                                   'tC' => idiodevdd_4kv_c,
                                                   'tB' => idiodevdd_4kv_b,
                                                   'tE' => idiodevdd_4kv_e_1x1 })

# idiodevss_2kv
logger.info('Extracting idiodevss_2kv ESD device')
extract_devices(bjt3('idiodevss_2kv', Esd3Term), { 'C' => idiodevss_2kv_c.extents,
                                                   'B' => idiodevss_2kv_b.extents,
                                                   'E' => idiodevss_2kv_e_1x1,
                                                   'tC' => idiodevss_2kv_c,
                                                   'tB' => idiodevss_2kv_b,
                                                   'tE' => idiodevss_2kv_e_1x1 })

# idiodevss_4kv
logger.info('Extracting idiodevss_4kv ESD device')
extract_devices(bjt3('idiodevss_4kv', Esd3Term), { 'C' => idiodevss_4kv_c.extents,
                                                   'B' => idiodevss_4kv_b.extents,
                                                   'E' => idiodevss_4kv_e_1x1,
                                                   'tC' => idiodevss_4kv_c,
                                                   'tB' => idiodevss_4kv_b,
                                                   'tE' => idiodevss_4kv_e_1x1 })

#======================
# ----- MOSCL-ESD -----
#======================

# nmoscl_2
logger.info('Extracting nmoscl_2 ESD device')
extract_devices(diode('nmoscl_2', Esd2Term), { 'N' => nmoscl_2_n, 'P' => nmoscl_2_p })

# nmoscl_4
logger.info('Extracting nmoscl_4 ESD device')
extract_devices(diode('nmoscl_4', Esd2Term), { 'N' => nmoscl_4_n, 'P' => nmoscl_4_p })
