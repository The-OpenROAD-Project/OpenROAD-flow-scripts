#!/usr/bin/env python3

# Read grt/rcx capacitance/wire length files for multiple designs and
# use linear regression to fit layer capacitances to rcx net capacitances.
# Use ORFS 'make write_net_caps' to write cap files.

import os
from sys import exit
from collections import defaultdict

import collections
import argparse
import re
import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Units reported on plot and fitted capacitances.
cap_unit = "fF"
cap_scale = 1e-15

# Parse and validate arguments
# =============================================================================

def parse_args():
  parser = argparse.ArgumentParser(
      description='Determines layer capacitance values for OpenROAD flow designs')
  parser.add_argument('--plot',
                      '-v',
                      required=False,
                      action='store_true',
                      default=False,
                      help='Plot grt/rcx capacitance differences')
  parser.add_argument('--capFile',
                      '-c',
                      nargs='+',
                      required=True,
                      help='capacitance csv file written by make compare_rc')
  args = parser.parse_args()

  return args

args = parse_args()

def makeDict():
  return collections.defaultdict(makeDict)

data = makeDict()

# Parse the cap CSV file generated by compare_rc_script.tcl
for capFile in args.capFile:
  design = capFile
  print("reading", design)
  with open(capFile) as f:
    nonGrtNets = 0
    for line in f:
      tokens = line.strip().split(',')
      netName = tokens[0]
      gplCap = float(tokens[1])
      grtCap = float(tokens[2])
      rcxCap = float(tokens[3])

      data[design][netName]["gpl_cap"] = gplCap
      data[design][netName]["grt_cap"] = grtCap
      data[design][netName]["rcx_cap"] = rcxCap
      layer_lengths = []
      layerNames = []
      for i in range(4, len(tokens), 2):
        layerNames.append(tokens[i])
        layer_lengths.append(float(tokens[i + 1]))
      data[design][netName]["layer_lengths"] = layer_lengths

################################################################

if args.plot:
  # Compare the GRT cap estimate vs. OpenRCX SPEF cap

  diff_x = []
  diff_percent_x = []
  for design in data:
    for net in data[design]:
      grtCap = data[design][net]["grt_cap"]
      rcxCap = data[design][net]["rcx_cap"]
      diff = grtCap - rcxCap
      if abs(diff) > 1e-12:
        print("large discrapancy:", design, net, diff)
      if rcxCap != 0.0:
        normDiff = (diff / rcxCap) * 100
        diff_x.append(diff / cap_scale )
        diff_percent_x.append(normDiff)

  # Generate histograms
  num_bins = 200
  fig = plt.figure()
  fig.suptitle("Difference between GRT est. Cap and RCX Cap")
  plt.subplot(2,2,1)
  plt.hist(diff_x, num_bins, facecolor='blue', alpha=0.5)
  plt.ylabel("# Nets")
  plt.xlabel("Capacitance ({})\n\nMean: {:.3f}{}\nStd. dev: {:.3f}fF".format(cap_unit, np.mean(diff_x), cap_unit, np.std(diff_x)))

  plt.subplot(2,2,2)
  plt.hist(diff_percent_x, num_bins, range={-1000, 1000}, facecolor='blue', alpha=0.5)
  plt.ylabel("# Nets")
  plt.xlabel("%\n\nMean: {:.3f}%\nStd. dev: {:.3f}%".format(np.mean(diff_percent_x),
                                                            np.std(diff_percent_x)))
  plt.show()

################################################################

# Use linear regression to find updated layer capacitances.

x = []
y = []
for design in data:
  for net in data[design]:
    layer_lengths = data[design][net]["layer_lengths"]
    x.append(layer_lengths)
    y.append(data[design][net]["rcx_cap"])
    
x = np.array(x)
y = np.array(y)

model = LinearRegression(fit_intercept=False).fit(x, y)
r_sq = model.score(x, y)
print('Coefficient of determination: {:.4f}'.format(r_sq))
print("New layer capacitances:")

for layer, coeff in zip(layerNames, model.coef_):
  print("Layer {}: {:.5E} {}/um".format(layer, coeff / cap_scale, cap_unit))
