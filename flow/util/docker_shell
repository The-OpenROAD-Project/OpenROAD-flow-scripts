#!/usr/bin/env bash

set -ex

#
# Method to use docker CLI to determine if we're using docker or podman
#
# Sets container_engine global variable with either "docker" or "podman"
#
get_container_engine () {
    local DOCKER_VERSION_STRING=$(docker --version 2> /dev/null)

    if [[ "$DOCKER_VERSION_STRING" == *"Docker"* ]]; then
        container_engine="docker"
    elif [[ "$DOCKER_VERSION_STRING" == *"podman"* ]]; then
        container_engine="podman"
    else
        echo "Unable to determine container engine using docker CLI"
        exit 1
    fi
}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

get_container_engine

WORKSPACE=$(pwd)
YOSYS_EXE=${YOSYS_EXE:-/OpenROAD-flow-scripts/tools/install/yosys/bin/yosys}
OPENROAD_EXE=${OPENROAD_EXE:-/OpenROAD-flow-scripts/tools/install/OpenROAD/bin/openroad}
KLAYOUT_CMD=${KLAYOUT_CMD:-/usr/bin/klayout}

XSOCK=/tmp/.X11-unix
XAUTH=/tmp/.docker.xauth
xauth nlist :0 | sed -e 's/^..../ffff/' | xauth -f $XAUTH nmerge -
ARGUMENTS=$@

if test -t 0; then
    DOCKER_INTERACTIVE=-ti
fi

if [[ $container_engine == "podman" ]]; then
    user_args="--privileged --userns=keep-id"
else
    user_args="-u $(id -u ${USER}):$(id -g ${USER})"
fi

# Most of these options below has to do with allowing to
# run the OpenROAD GUI from within Docker.
docker run $user_args \
 -e LIBGL_ALWAYS_SOFTWARE=1 \
 -e "QT_X11_NO_MITSHM=1" \
 -e XDG_RUNTIME_DIR=/tmp/xdg-run \
 -e DISPLAY=$DISPLAY \
 -e QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb \
 -v $XSOCK:$XSOCK \
 -v $XAUTH:$XAUTH \
 -e XAUTHORITY=$XAUTH \
 -e FLOW_HOME=/OpenROAD-flow-scripts/flow/ \
 -e YOSYS_EXE=$YOSYS_EXE \
 -e OPENROAD_EXE=$OPENROAD_EXE \
 -e KLAYOUT_CMD=$KLAYOUT_CMD \
 -v $WORKSPACE:/OpenROAD-flow-scripts/flow:Z \
 --network host \
 $DOCKER_INTERACTIVE \
 ${OR_IMAGE:-openroad/flow-ubuntu22.04-builder:latest} \
 bash -c "set -ex
 mkdir /tmp/xdg-run
 cd /OpenROAD-flow-scripts/flow
 . ../env.sh
 $ARGUMENTS
"
